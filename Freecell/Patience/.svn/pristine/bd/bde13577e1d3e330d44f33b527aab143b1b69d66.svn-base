package application;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import aui.AcesUpAUI;
import controller.AcesUpController;
import controller.GameController;
import controller.PatienceController;
import javafx.animation.PathTransition;
import javafx.animation.PauseTransition;
import javafx.animation.SequentialTransition;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.geometry.Bounds;
import javafx.scene.Node;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;
import model.AcesUp;
import model.Card;
import model.Cardstack;
import model.Move;
import model.Rank;
import model.SingleplayerStatistics;
import model.Suit;
import model.Type;
import movecontroller.DragDoneController;
import movecontroller.DragDropController;
import movecontroller.DragDropEnteredController;
import movecontroller.DragDropExitController;
import movecontroller.DragOverController;
import movecontroller.DragStartController;
import movecontroller.MergeImages;

public class AcesUpGUIController extends GameGUIController implements AcesUpAUI{
	

    @FXML // ResourceBundle that was given to the FXMLLoader
    private ResourceBundle resources;

    @FXML // URL location of the FXML file that was given to the FXMLLoader
    private URL location;
    
    @FXML // fx:id="acesUpPane"
    private AnchorPane acesUpPane; // Value injected by FXMLLoader

    @FXML // fx:id="nachziehStapel"
    private Rectangle nachziehStapel; // Value injected by FXMLLoader

    @FXML // fx:id="spielStapel1"
    private Rectangle spielStapel1; // Value injected by FXMLLoader

    @FXML // fx:id="spielStapel4"
    private Rectangle spielStapel4; // Value injected by FXMLLoader

    @FXML // fx:id="spielStapel3"
    private Rectangle spielStapel3; // Value injected by FXMLLoader

    @FXML // fx:id="spielStapel2"
    private Rectangle spielStapel2; // Value injected by FXMLLoader

    @FXML // fx:id="ablegeStapel"
    private Rectangle ablegeStapel; // Value injected by FXMLLoader
    
    @FXML // fx:id="talonPane"
    private Pane talonPane; // Value injected by FXMLLoader

    @FXML // fx:id="playingPane4"
    private Pane playingPane4; // Value injected by FXMLLoader

    @FXML // fx:id="eliminationPane"
    private Pane eliminationPane; // Value injected by FXMLLoader

    @FXML // fx:id="playingPane3"
    private Pane playingPane3; // Value injected by FXMLLoader

    @FXML // fx:id="playingPane2"
    private Pane playingPane2; // Value injected by FXMLLoader

    @FXML // fx:id="playingPane1"
    private Pane playingPane1; // Value injected by FXMLLoader
        
    private Cardstack[] playingStacks;

	private Cardstack talon;

	private Cardstack eliminationStack;
	
	private ArrayList <Pane> spielfeld;

    @FXML
    public void test(MouseEvent event) {

    }

    @FXML // This method is called by the FXMLLoader when initialization is complete
    public void initialize() {     
    	spielfeld = new ArrayList<Pane>();
    	spielfeld.add(playingPane1);
    	spielfeld.add(playingPane2);
    	spielfeld.add(playingPane3);
    	spielfeld.add(playingPane4);
    }	
    
    /* 
     * stacks get initialized and pane gets drag / drop controller
     * @see aui.AcesUpAUI#initializeStacks()
     */
    public void initializeStacks(){  
    	playingStacks = ((AcesUp) patienceController.getPatience().getGame()).getPlayingStacks();
		talon = ((AcesUp) patienceController.getPatience().getGame()).getTalon();
		eliminationStack = ((AcesUp) patienceController.getPatience().getGame()).getEliminationStack();
		acesUpPane.setOnDragOver(new DragOverController());
	    acesUpPane.setOnDragDropped(new DragDropController(this.patienceController.getAcesUpController()));
		
    	refreshAll();
    }
	
	@Override
	public void init() {
		patienceController.getAcesUpController().setAcesUpAUI(this);
		patienceController.getAcesUpController().initGame();
		
		//refreshAll();
	}

	/* 
	 * stacks get refreshed
	 * @see aui.AcesUpAUI#refreshAll()
	 */
	@Override
	public void refreshAll() {
		for (Pane playingPane : this.spielfeld) {
			playingPane.getChildren().clear();
		}
//		talonPane.getChildren().clear();
//		eliminationPane.getChildren().clear();
		this.showTalon();
		this.showEliminationStack();
		
		for(int i = 0; i < spielfeld.size(); i++){
			showPlayingStacks(spielfeld.get(i), this.playingStacks[i]);
			playingStacks[i].setLocation(i);
    	}
		
	}
	
	/**
	 * sets gui to each card of talon, sets mouseclick eventhandler
	 */
	private void showTalon(){
		if(!this.talon.isEmpty()){
			Card card= this.talon.peek();
			Image cardImg = card.getBackImage();
			ImageView cardImgView = new ImageView(cardImg);
			talonPane.getChildren().add(cardImgView);
			
			cardImgView.setOnDragDetected(new DragStartController(this.patienceController.getAcesUpController(), cardImgView, this.talon, card));
			cardImgView.setOnDragOver(new DragOverController(this.patienceController.getAcesUpController(), this.talon));
			cardImgView.setOnDragDropped(new DragDropController(this.patienceController.getAcesUpController()));
			//cardImgView.setOnDragDone(new DragDoneController(this.patienceController.getAcesUpController()));
			
			cardImgView.setOnMouseClicked(new EventHandler<MouseEvent> (){
				@Override
				public void handle(MouseEvent mouseEvent){
					if(mouseEvent.getButton().equals(MouseButton.PRIMARY)){
			            if(mouseEvent.getClickCount() == 2){			               
			               patienceController.getAcesUpController().drawCards();
			            }
			        }
				}
				
			});
		
			talonPane.setOnDragDropped(new DragDropController(this.patienceController.getAcesUpController()));
			talonPane.setOnDragOver(new DragOverController());
		}		
		else{
			talonPane.getChildren().clear();
		}
	}
	
	/**
	 * sets gui of each card in eliminationstack
	 */
	private void showEliminationStack(){
		GameController acesUpController = patienceController.getAcesUpController();
		for(Card card : eliminationStack) {
			Image cardImg = card.getFaceImage();
			ImageView cardImgView = new ImageView(cardImg);
			eliminationPane.getChildren().add(cardImgView);
			
			cardImgView.setOnDragDetected(new DragStartController(acesUpController, cardImgView, this.eliminationStack, card));
			cardImgView.setOnDragOver(new DragOverController(acesUpController, this.eliminationStack));
			cardImgView.setOnDragDropped(new DragDropController(acesUpController));
			cardImgView.setOnDragDone(new DragDoneController(acesUpController));
		}
		eliminationPane.setOnDragOver(new DragOverController(acesUpController, eliminationStack));
		eliminationPane.setOnDragEntered(new DragDropEnteredController(acesUpController, eliminationStack, eliminationPane));
		eliminationPane.setOnDragExited(new DragDropExitController( acesUpController, eliminationPane));
		eliminationPane.setOnDragDropped(new DragDropController( acesUpController));
		eliminationPane.setOnDragDone(new DragDoneController(acesUpController));	
		
	}
	
	/**
	 * 
	 * sets gui to each card of playingstacks, sets mouseclick eventhandler to each card of playingstacks
	 * @param row
	 * @param stack
	 */
	private void showPlayingStacks(Pane row, Cardstack stack){
		GameController acesUpController = patienceController.getAcesUpController();

		for (int i = 0; i < stack.size(); i++) {
			Card karte = stack.get(i);
			Image karteImg = karte.getFaceImage();
			ImageView cardImgView = new ImageView(karteImg);
			row.getChildren().add(cardImgView);
			cardImgView.setLayoutY(i * 30);
			
			// setzt DragController fÃ¼r eine Karte
			cardImgView.setOnDragDetected(new DragStartController(acesUpController, cardImgView, stack, karte));
			cardImgView.setOnDragOver(new DragOverController(acesUpController, stack));
			cardImgView.setOnDragDropped(new DragDropController(acesUpController));
			cardImgView.setOnDragDone(new DragDoneController(acesUpController));
			
			cardImgView.setOnMouseClicked(new EventHandler<MouseEvent> (){
				@Override
				public void handle(MouseEvent mouseEvent){
					if(mouseEvent.getButton().equals(MouseButton.PRIMARY) && stack.getType().equals(Type.PLAYINGSTACK)){
			            if(mouseEvent.getClickCount() == 2){			
			            	boolean exist = false;
			            	
			            	for(Cardstack playingStack: playingStacks){
								if(patienceController.getAcesUpController().existsHigherRankSameSuit(stack.peek(), playingStack)){
									//game.getEliminationStack().add(playingStack.pop())									
									 exist = true;
								}
							}
			            	if(exist){
			            		patienceController.getAcesUpController().executeMove(new Move(stack,eliminationStack,1));
			            	}
//			            	refreshAll();
			               
			            }
			        }
				}
				
			});

		}
		row.setOnDragDropped(new DragDropController(acesUpController));
		row.setOnDragOver(new DragOverController(acesUpController, stack));
		row.setOnDragEntered(new DragDropEnteredController(acesUpController, stack, row));
		row.setOnDragDone(new DragDoneController(acesUpController));	
	}

	@Override
	public void animateMove(Move move) {
		int i = move.getTo().getLocation();
		System.out.println("end " + move.getTo().getType().name() + i);
		i = move.getFrom().getLocation();
		System.out.println("start " + move.getFrom().getType().name() + i);

		PlaceInfo placeInfo = new PlaceInfo(move);
		ImageView animeImg = placeInfo.getImg();
		acesUpPane.getChildren().add(animeImg);

		ImageView tmpview = placeInfo.getTmpView();

		ObservableList<Node> nodes = ((Pane) tmpview.getParent()).getChildren();

		int tmpsize = move.getNumberOfCards();
		if(move.getFrom().size() >= tmpsize && nodes.size()>=move.getFrom().size()){
			while (tmpsize > 0) {
				((ImageView) nodes.get(move.getFrom().size() - tmpsize)).setImage(null);
				tmpsize--;
			}
		}
		
		Path path = new Path();

		path.getElements().add(new MoveTo(placeInfo.getStartX(), placeInfo.getStartY()));
		path.getElements().add(new LineTo(placeInfo.getEndX(), placeInfo.getEndY()));

		PathTransition pathTransition = new PathTransition();
		pathTransition.setDuration(Duration.millis(500));
		pathTransition.setPath(path);
		pathTransition.setNode(animeImg);
		pathTransition.setCycleCount(1);

	
		pathTransition.play();

		pathTransition.setOnFinished(e -> {
			acesUpPane.getChildren().remove(animeImg);
			this.refreshAll();
		});
		
	}
	private class PlaceInfo {
		private ImageView animeImg;
		private ImageView tmpView;
		private double startX;
		private double startY;
		private double endX;
		private double endY;

		private PlaceInfo(Move move) {
			startX = 0;
			startY = 0;
			endX = 0;
			endY = 0;
			Cardstack stapelToAnime = move.getFrom().cloneAllBelow(move.getNumberOfCards());
			MergeImages merge = new MergeImages(stapelToAnime);
			animeImg = new ImageView(merge.getImage());
			locateStart(move);
			locateEnd(move);
		}

		private void locateEnd(Move move) {
			int i = move.getTo().getLocation();
			Node node = null;
			switch (move.getTo().getType()) {
			case TALON:
				node = talonPane;
				
				break;
			case ELIMINATIONSTACK:
				node = eliminationPane;
				
				break;
			case PLAYINGSTACK:
				if(spielfeld.get(i).getChildren().size() >=move.getNumberOfCards()){
					node = spielfeld.get(i).getChildren()
							.get(spielfeld.get(i).getChildren().size() - move.getNumberOfCards());
					endY = 30;
				}
				else{
					node = spielfeld.get(i);
				}
				
				break;

			default:
			}
			Bounds boundsInScene = node.localToScene(node.getBoundsInLocal());
			endX += boundsInScene.getMinX();
			endY += boundsInScene.getMinY();
		}

		private void locateStart(Move move) {
			int i = move.getFrom().getLocation();
			Node node = null;
			switch (move.getFrom().getType()) {
			case TALON:
				node = talonPane;
				tmpView = (ImageView) talonPane.getChildren().get(0);
				break;
			case ELIMINATIONSTACK:
				node = eliminationPane;
				tmpView = (ImageView) eliminationPane.getChildren().get(eliminationPane.getChildren().size() - 1);
				break;
			case PLAYINGSTACK:
				if(spielfeld.get(i).getChildren().size() >=move.getNumberOfCards()){
					node = spielfeld.get(i).getChildren()
							.get(spielfeld.get(i).getChildren().size() - move.getNumberOfCards());
				}
				else{
					node = spielfeld.get(i);
				}
				tmpView = (ImageView) node;
				break;
			default:
			}
			Bounds boundsInScene = node.localToScene(node.getBoundsInLocal());
			startX += boundsInScene.getMinX();
			startY += boundsInScene.getMinY();
		}

		private ImageView getImg() {
			return animeImg;
		}

		public double getStartX() {
			return startX;
		}

		public double getStartY() {
			return startY;
		}

		public double getEndX() {
			return endX;
		}

		public double getEndY() {
			return endY;
		}

		public ImageView getTmpView() {
			return tmpView;
		}

		public void setTmpView(ImageView tmpView) {
			this.tmpView = tmpView;
		}
	}
}

package application;

import java.awt.AWTException;
import java.awt.event.InputEvent;
import java.util.ArrayList;

import aui.FreeCellAUI;
import controller.GameController;
import javafx.animation.PathTransition;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Bounds;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;
import model.Card;
import model.Cardstack;
import model.FreeCell;
import model.Move;
import model.Type;
import movecontroller.DragDoneController;
import movecontroller.DragDropController;
import movecontroller.DragDropEnteredController;
import movecontroller.DragDropExitController;
import movecontroller.DragOverController;
import movecontroller.DragStartController;
import movecontroller.MergeImages;

public class FreeCellGUIController extends GameGUIController implements FreeCellAUI {
	@FXML
	Pane hauptPane;
	@FXML
	Button undo;

	@FXML
	Pane freecell1;
	@FXML
	Pane freecell2;
	@FXML
	Pane freecell3;
	@FXML
	Pane freecell4;

	@FXML
	Pane homecell1;
	@FXML
	Pane homecell2;
	@FXML
	Pane homecell3;
	@FXML
	Pane homecell4;

	@FXML
	Pane spalte1;
	@FXML
	Pane spalte2;
	@FXML
	Pane spalte3;
	@FXML
	Pane spalte4;
	@FXML
	Pane spalte5;
	@FXML
	Pane spalte6;
	@FXML
	Pane spalte7;
	@FXML
	Pane spalte8;

	private Cardstack[] playingStacks;
	private Cardstack[] freeCells;
	private Cardstack[] homeCells;
	private ArrayList<Pane> spielfeld;
	private ArrayList<Pane> homecell;
	private ArrayList<Pane> freecell;

	@Override
	public void init() {

		patienceController.getFreeCellController().setFreeCellAUI(this);
		patienceController.getFreeCellController().initGame();
	}

	@FXML
	public void initialize() {
		spielfeld = new ArrayList<Pane>();
		freecell = new ArrayList<Pane>();
		homecell = new ArrayList<Pane>();

		spielfeld.add(spalte1);
		spielfeld.add(spalte2);
		spielfeld.add(spalte3);
		spielfeld.add(spalte4);
		spielfeld.add(spalte5);
		spielfeld.add(spalte6);
		spielfeld.add(spalte7);
		spielfeld.add(spalte8);
		homecell.add(homecell1);
		homecell.add(homecell2);
		homecell.add(homecell3);
		homecell.add(homecell4);
		freecell.add(freecell1);
		freecell.add(freecell2);
		freecell.add(freecell3);
		freecell.add(freecell4);

	}

	/**
	 * kann von Drag/ Drop-Controller geruft werden
	 */

	@Override
	public void initializeStacks() {
		patienceController.getFreeCellController().setFreeCellAUI(this);

		playingStacks = ((FreeCell) patienceController.getPatience().getGame()).getPlayingStacks();
		freeCells = ((FreeCell) patienceController.getPatience().getGame()).getFreeCells();
		homeCells = ((FreeCell) patienceController.getPatience().getGame()).getHomeCells();
		hauptPane.setOnDragOver(new DragOverController());
		hauptPane.setOnDragDropped(new DragDropController(this.patienceController.getFreeCellController()));

		refreshAll();
	}

	/**
	 * setzt ein Stapel in einer Spalte
	 * 
	 * @param Stapeln
	 */
	private void refreshSpalten() {
		for (int i = 0; i < spielfeld.size(); i++) {
			this.setFreeCellStacks(spielfeld.get(i), playingStacks[i]);
			playingStacks[i].setLocation(i);
		}
		for (int i = 0; i < freecell.size(); i++) {
			this.setFreeCellStacks(freecell.get(i), freeCells[i]);
			this.setFreeCellStacks(homecell.get(i), homeCells[i]);
			freeCells[i].setLocation(i);
			homeCells[i].setLocation(i);
		}
	}

	/**
	 * alle Karte soll untereinander gesetzt werden DragController für jede
	 * Karte setzen
	 * 
	 * @param row
	 * @param stack
	 */

	public void setFreeCellStacks(Pane row, Cardstack stack) {

		GameController tmp = patienceController.getFreeCellController();

		// nur f�r Stacktype playingstack wird schleife mehr als 1 mal
		// durchlaufen
		// bei allen anderen Typen nur einmal

		for (int i = 0; i < stack.size(); i++) {
			Card karte = stack.get(i);
			Image karteImg = karte.getFaceImage();
			ImageView karteImgView = new ImageView(karteImg);
			row.getChildren().add(karteImgView);
			if (stack.getType().equals(Type.PLAYINGSTACK)) {
				karteImgView.setLayoutY(i * 30);
			} else if (stack.getType().equals(Type.FREECELL)) {
				karteImgView.setLayoutX(5);
				karteImgView.setLayoutY(5);
			} else if (stack.getType().equals(Type.HOMECELL)) {
				karteImgView.setLayoutX(5);
				karteImgView.setLayoutY(5);
			}
			// setzt DragController für eine Karte

			karteImgView.setOnDragDetected(new DragStartController(tmp, karteImgView, stack, karte));
			karteImgView.setOnDragOver(new DragOverController(tmp, stack));
			karteImgView.setOnDragDropped(new DragDropController(tmp));
			karteImgView.setOnDragDone(new DragDoneController(tmp));
			karteImgView.setOnMouseClicked(e -> {
				if (tmp.isDraggable(stack, karte)) {
					if (e.getClickCount() == 2) {
						autoByClick(stack, karte);
					}
				}

			});

		}

		// spalte.setPrefHeight((stapel.size()-1)*30+153);
		row.setOnDragDropped(new DragDropController(tmp));
		row.setOnDragEntered(new DragDropEnteredController(tmp, stack, row));
		row.setOnDragExited(new DragDropExitController(tmp, row));
		row.setOnDragOver(new DragOverController());
		row.setOnDragDone(new DragDoneController(tmp));
	}

	private void autoByClick(Cardstack stack, Card karte) {
		if (karte.getRank().ordinal() == 0) {
			for (Cardstack home : ((FreeCell) patienceController.getPatience().getGame()).getHomeCells()) {
				if (home.size() == 0) {
					Move tmp = new Move(stack, home, 1);
					patienceController.getFreeCellController().executeMove(tmp);
					patienceController.getPatience().getGame().getHistory().push(tmp);
					break;
				}
			}
		} else {
			for (Cardstack home : ((FreeCell) patienceController.getPatience().getGame()).getHomeCells()) {
				if (home.size() > 0) {
					if (home.peek().sameColorSorted(karte)) {
						Move tmp = new Move(stack, home, 1);
						patienceController.getFreeCellController().executeMove(tmp);
						patienceController.getPatience().getGame().getHistory().push(tmp);
						break;
					}
				}
			}
		}

	}

	@Override
	public void refreshAll() {
		for (Pane freecell : this.freecell) {
			freecell.getChildren().clear();
		}
		for (Pane homecell : this.homecell) {
			homecell.getChildren().clear();
		}
		for (Pane field : this.spielfeld) {
			field.getChildren().clear();
		}
		refreshSpalten();
	}

	@FXML
	public void undo() {
		patienceController.getFreeCellController().undoMove();
	}

	@Override
	public void animateMove(Move move) {

		int i = move.getTo().getLocation();
		System.out.println("end " + move.getTo().getType().name() + i);
		i = move.getFrom().getLocation();
		System.out.println("start " + move.getFrom().getType().name() + i);

		PlaceInfo placeInfo = new PlaceInfo(move);
		ImageView animeImg = placeInfo.getImg();
		hauptPane.getChildren().add(animeImg);

		ImageView tmpview = placeInfo.getTmpView();

		ObservableList<Node> nodes = ((Pane) tmpview.getParent()).getChildren();

		int tmpsize = move.getNumberOfCards();

		while (tmpsize > 0) {
			((ImageView) nodes.get(move.getFrom().size() - tmpsize)).setImage(null);
			tmpsize--;
		}

		Path path = new Path();

		path.getElements().add(new MoveTo(placeInfo.getStartX(), placeInfo.getStartY()));
		path.getElements().add(new LineTo(placeInfo.getEndX(), placeInfo.getEndY()));

		PathTransition pathTransition = new PathTransition();
		pathTransition.setDuration(Duration.millis(500));
		pathTransition.setPath(path);
		pathTransition.setNode(animeImg);

		pathTransition.setCycleCount(1);

		pathTransition.play();

		pathTransition.setOnFinished(e -> {
			hauptPane.getChildren().remove(animeImg);
			this.refreshAll();
		});
	}

	private class PlaceInfo {
		private ImageView animeImg;
		private ImageView tmpView;
		private double startX;
		private double startY;
		private double endX;
		private double endY;
		private boolean error;

		private PlaceInfo(Move move) {
			error = false;
			Cardstack stapelToAnime = move.getFrom().cloneAllBelow(move.getNumberOfCards());
			MergeImages merge = new MergeImages(stapelToAnime);
			animeImg = new ImageView(merge.getImage());
			locateStart(move);
			locateEnd(move);
		}

		private void locateEnd(Move move) {
			int i = move.getTo().getLocation();
			Node node = null;
			switch (move.getTo().getType()) {
			case FREECELL:
				node = freecell.get(i);
				
				break;
			case HOMECELL:
				node = homecell.get(i);
				
				break;
			case PLAYINGSTACK:
				node = spielfeld.get(i).getChildren()
						.get(spielfeld.get(i).getChildren().size() - move.getNumberOfCards());
				
				break;

			default:
				error = true;
			}
			Bounds boundsInScene = node.localToScene(node.getBoundsInLocal());
			endX = boundsInScene.getMinX();
			endY = boundsInScene.getMinY();
		}

		private void locateStart(Move move) {
			int i = move.getFrom().getLocation();
			Node node = null;
			switch (move.getFrom().getType()) {
			case FREECELL:
				node = freecell.get(i);
				tmpView = (ImageView) freecell.get(i).getChildren().get(0);
				break;
			case HOMECELL:
				node = homecell.get(i);
				tmpView = (ImageView) homecell.get(i).getChildren().get(homecell.get(i).getChildren().size() - 1);
				break;
			case PLAYINGSTACK:
				node = spielfeld.get(i).getChildren()
						.get(spielfeld.get(i).getChildren().size() - move.getNumberOfCards());
				tmpView = (ImageView) node;
				break;
			default:
				error = true;
			}
			Bounds boundsInScene = node.localToScene(node.getBoundsInLocal());
			startX = boundsInScene.getMinX();
			startY = boundsInScene.getMinY();
		}

		private ImageView getImg() {
			return animeImg;
		}

		public double getStartX() {
			return startX;
		}

		public double getStartY() {
			return startY;
		}

		public double getEndX() {
			return endX;
		}

		public double getEndY() {
			return endY;
		}

		public ImageView getTmpView() {
			return tmpView;
		}

		public void setTmpView(ImageView tmpView) {
			this.tmpView = tmpView;
		}
	}
}

package application;

import java.util.ArrayList;

import aui.ZankAUI;
import controller.GameController;
import controller.ZankController;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import model.Card;
import model.Cardstack;
import model.Move;
import model.Type;
import model.Zank;
import movecontroller.DragDoneController;
import movecontroller.DragDropController;
import movecontroller.DragDropEnteredController;
import movecontroller.DragDropExitController;
import movecontroller.DragOverController;
import movecontroller.DragStartController;

public class ZankGUIController extends GameGUIController implements ZankAUI {

	@FXML
	private AnchorPane mainPane;

	@FXML
	private Pane ersatzstapelGegner;

	@FXML
	private Pane nachziehstapelGegner;

	@FXML
	private Pane ablegestapelGegner;

	@FXML
	private Pane anlegestapel1;

	@FXML
	private Pane anlegestapel2;

	@FXML
	private Pane anlegestapel3;

	@FXML
	private Pane anlegestapel4;

	@FXML
	private Pane anlegestapel5;

	@FXML
	private Pane anlegestapel6;

	@FXML
	private Pane anlegestapel7;

	@FXML
	private Pane anlegestapel8;

	@FXML
	private Pane mitteKaro1;

	@FXML
	private Pane mitteKaro2;

	@FXML
	private Pane mittePik1;

	@FXML
	private Pane mittePik2;

	@FXML
	private Pane mitteKreuz1;

	@FXML
	private Pane mitteKreuz2;

	@FXML
	private Pane mitteHerz1;

	@FXML
	private Pane mitteHerz2;

	@FXML
	private Pane ablegestapelSpieler;

	@FXML
	private Pane nachziehstapelSpieler;

	@FXML
	private Pane ersatzstapelSpieler;

	private Zank game;

	private ArrayList<Pane> playingPanes;
	private ArrayList<Pane> eliminationPanes;
	private ArrayList<Pane> handPanes;
	private ArrayList<Pane> reservePanes;
	private ArrayList<Pane> wastePanes;

	private Cardstack[] playingstacks;
	private Cardstack[] eliminationstacks;
	private Cardstack[] hands;
	private Cardstack[] reserves;
	private Cardstack[] wastepiles;

	/*
	 * (non-Javadoc)
	 * 
	 * @see application.GameGUIController#init()
	 */
	@Override
	public void init() {
		patienceController.getZankController().setZankAUI(this);

		game = (Zank) patienceController.getPatience().getGame();

		mainPane.setOnDragOver(new DragOverController());
		mainPane.setOnDragDropped(new DragDropController(this.patienceController.getFreeCellController()));

		patienceController.getZankController().initGame();
		
		//TODO when click on empty hand get cards from wastepile
//		nachziehstapelSpieler.setOnMouseClicked(new EventHandler<MouseEvent> (){
//			@Override
//			public void handle(MouseEvent mouseEvent){
//				if(mouseEvent.getButton().equals(MouseButton.PRIMARY)){
//		            if(game.getHands()[0].isEmpty()){
//		            	game.getHands()[0].addAll(game.getWastePiles()[0].flipStack());
//		            	game.getWastePiles()[0].empty();
//		            }
//		        }
//			}
//			
//		});
//		nachziehstapelGegner.setOnMouseClicked(new EventHandler<MouseEvent> (){
//			@Override
//			public void handle(MouseEvent mouseEvent){
//				if(mouseEvent.getButton().equals(MouseButton.PRIMARY)){
//		            if(game.getHands()[1].isEmpty()){
//		            	game.getHands()[1].addAll(game.getWastePiles()[1].flipStack());
//		            	game.getWastePiles()[1].empty();
//		            }
//		        }
//			}
//			
//		});
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see aui.ZankAUI#refreshAll()
	 */
	@Override
	public void refreshAll() {
		getStacks();
		clearPanes(playingPanes);
		clearPanes(eliminationPanes);
		clearPanes(handPanes);
		clearPanes(reservePanes);
		clearPanes(wastePanes);
		refreshPlayingfield();
		refreshPlayerstacks();
	}

	/**
	 * gets updated cardstacks from game
	 */
	private void getStacks() {

		playingstacks = game.getPlayingStacks();
		eliminationstacks = game.getEliminationStacks();
		hands = game.getHands();
		reserves = game.getReserves();
		wastepiles = game.getWastePiles();

	}

	/**
	 * clears all panes in list
	 * 
	 * @param listOfPanes
	 *            list of panes to clear
	 */
	private void clearPanes(ArrayList<Pane> listOfPanes) {
		for (Pane pane : listOfPanes) {
			pane.getChildren().clear();
		}
	}

	/**
	 * refreshs all cards on playerStacks
	 */
	private void refreshPlayerstacks() {
		for (int i = 0; i < handPanes.size(); i++) {
			refreshPane(handPanes.get(i), hands[i]);
			refreshPane(reservePanes.get(i), reserves[i]);
			refreshPane(wastePanes.get(i), wastepiles[i]);
		}
	}

	/**
	 * refreshs all cards on playingstacks
	 */
	private void refreshPlayingfield() {
		for (int i = 0; i < playingPanes.size(); i++) {
			refreshPane(playingPanes.get(i), playingstacks[i]);
			refreshPane(eliminationPanes.get(i), eliminationstacks[i]);
		}
	}

	/**
	 * puts cards on panes
	 * 
	 * @param pane
	 *            pane to put cards on
	 * @param cardstack
	 *            cards to put on
	 */
	private void refreshPane(Pane pane, Cardstack cardstack) {
		ZankController tmp = patienceController.getZankController();
		for (int i = 0; i < cardstack.size(); i++) {
			Card card = cardstack.get(i);
			Image cardImage;
			if (cardstack.getType().equals(Type.HAND) && cardstack != game.getHands()[tmp.getActivePlayer()]) {
				cardImage = card.getBackImage();
			} else {
				cardImage = card.getFaceImage();
			}
			ImageView cardImageView = new ImageView(cardImage);
			cardImageView.resize(95, 138);
			pane.getChildren().add(cardImageView);
			if (cardstack.getType().equals(Type.PLAYINGSTACK)) {
				if (playingPanes.indexOf(pane) < playingPanes.size() / 2) {
					if (cardstack.size() < 8) {
						cardImageView.setLayoutX(i * -30);
					} else {
						cardImageView.setLayoutX(i * -240 / cardstack.size());
					}
				} else {
					if (cardstack.size() < 8) {
						cardImageView.setLayoutX(i * 30);
					} else {
						cardImageView.setLayoutX(i * 240 / cardstack.size());
					}
				}
			} else {
				cardImageView.setLayoutY(i * -0.33);
			}
			// setzt DragController fÃ¼r eine Karte

			cardImageView.setOnDragDetected(new DragStartController(tmp, cardImageView, cardstack, card));
			cardImageView.setOnDragOver(new DragOverController(tmp, cardstack));
			cardImageView.setOnDragDropped(new DragDropController(tmp));
			cardImageView.setOnDragDone(new DragDoneController(tmp));

		}

		// spalte.setPrefHeight((stapel.size()-1)*30+153);
		pane.setOnDragDropped(new DragDropController(tmp));
		pane.setOnDragEntered(new DragDropEnteredController(tmp, cardstack, pane));
		pane.setOnDragExited(new DragDropExitController(tmp, pane));
		pane.setOnDragOver(new DragOverController());
		pane.setOnDragDone(new DragDoneController(tmp));

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see aui.ZankAUI#refreshMove(model.Move)
	 */
	@Override
	public void refreshMove(Move move) {
		// TODO Auto-generated method stub

	}

	@FXML
	public void initialize() {
		playingPanes = new ArrayList<>();
		eliminationPanes = new ArrayList<>();
		handPanes = new ArrayList<>();
		reservePanes = new ArrayList<>();
		wastePanes = new ArrayList<>();

		playingPanes.add(anlegestapel1);
		playingPanes.add(anlegestapel2);
		playingPanes.add(anlegestapel3);
		playingPanes.add(anlegestapel4);
		playingPanes.add(anlegestapel5);
		playingPanes.add(anlegestapel6);
		playingPanes.add(anlegestapel7);
		playingPanes.add(anlegestapel8);

		eliminationPanes.add(mitteKaro1);
		eliminationPanes.add(mitteKaro2);
		eliminationPanes.add(mittePik1);
		eliminationPanes.add(mittePik2);
		eliminationPanes.add(mitteKreuz1);
		eliminationPanes.add(mitteKreuz2);
		eliminationPanes.add(mitteHerz1);
		eliminationPanes.add(mitteHerz2);

		handPanes.add(nachziehstapelSpieler);
		handPanes.add(nachziehstapelGegner);

		reservePanes.add(ersatzstapelSpieler);
		reservePanes.add(ersatzstapelGegner);

		wastePanes.add(ablegestapelSpieler);
		wastePanes.add(ablegestapelGegner);
	}

}

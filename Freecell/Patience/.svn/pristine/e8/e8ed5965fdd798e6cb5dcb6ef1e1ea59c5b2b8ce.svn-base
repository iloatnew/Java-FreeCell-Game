package application;


import java.util.ArrayList;

import aui.ZankAUI;
import controller.GameController;
import javafx.fxml.FXML;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Pane;
import model.Card;
import model.Cardstack;
import model.Move;
import model.Type;
import model.Zank;
import movecontroller.DragDoneController;
import movecontroller.DragDropCrontroller;
import movecontroller.DragOverController;
import movecontroller.DragStartController;

public class ZankGUIController extends GameGUIController implements ZankAUI{

    @FXML
    private Pane ersatzstapelGegner;

    @FXML
    private Pane nachziehstapelGegner;

    @FXML
    private Pane ablegestapelGegner;

    @FXML
    private Pane anlegestapel1;

    @FXML
    private Pane anlegestapel2;

    @FXML
    private Pane anlegestapel3;

    @FXML
    private Pane anlegestapel4;

    @FXML
    private Pane anlegestapel5;

    @FXML
    private Pane anlegestapel6;

    @FXML
    private Pane anlegestapel7;

    @FXML
    private Pane anlegestapel8;

    @FXML
    private Pane mitteKaro1;

    @FXML
    private Pane mitteKaro2;

    @FXML
    private Pane mittePik1;

    @FXML
    private Pane mittePik2;

    @FXML
    private Pane mitteKreuz1;

    @FXML
    private Pane mitteKreuz2;

    @FXML
    private Pane mitteHerz1;

    @FXML
    private Pane mitteHerz2;

    @FXML
    private Pane ablegestapelSpieler;

    @FXML
    private Pane nachziehstapelSpieler;

    @FXML
    private Pane ersatzstapelSpieler;
    
    private Zank game;
    
    private ArrayList<Pane> playingPanes;
    private ArrayList<Pane> eliminationPanes;
    private ArrayList<Pane> handPanes;
    private ArrayList<Pane> reservePanes;
    private ArrayList<Pane> wastePanes;
    
    private Cardstack[] playingstacks;
    private Cardstack[] eliminationstacks;
    private Cardstack[] hands;
    private Cardstack[] reserves;
    private Cardstack[] wastepiles;

    /* (non-Javadoc)
     * @see application.GameGUIController#init()
     */
    @Override
    public void init(){
    	patienceController.getZankController().setZankAUI(this);
    	
    	game = (Zank) patienceController.getPatience().getGame();
    	
    	patienceController.getZankController().initGame();
    }

	/* (non-Javadoc)
	 * @see aui.ZankAUI#refreshAll()
	 */
	@Override
	public void refreshAll() {
		getStacks();
		clearPanes(playingPanes);
		clearPanes(eliminationPanes);
		clearPanes(handPanes);
		clearPanes(reservePanes);
		clearPanes(wastePanes);
		refreshPlayingfield();
		refreshPlayerstacks();
	}
	
	/**
	 * gets updated cardstacks from game
	 */
	private void getStacks() {
		
    	playingstacks = game.getPlayingStacks();
        eliminationstacks = game.getEliminationStacks();
        hands = game.getHands();
        reserves = game.getReserves();
        wastepiles = game.getWastePiles();
		
	}

	/**
	 * clears all panes in list
	 * @param listOfPanes list of panes to clear
	 */
	private void clearPanes(ArrayList<Pane> listOfPanes){
		for (Pane pane : listOfPanes) {
			pane.getChildren().clear();
		}
	}

	/**
	 * refreshs all cards on playerStacks
	 */
	private void refreshPlayerstacks() {
		for (int i = 0; i < handPanes.size() ; i++) {
			refreshPane(handPanes.get(i), hands[i]);
			refreshPane(reservePanes.get(i), reserves[i]);
			refreshPane(wastePanes.get(i), wastepiles[i]);
		}
	}

	/**
	 * refreshs all cards on playingstacks
	 */
	private void refreshPlayingfield() {
		for (int i = 0; i < playingPanes.size() ; i++) {
			refreshPane(playingPanes.get(i), playingstacks[i]);
			refreshPane(eliminationPanes.get(i), eliminationstacks[i]);
		}
	}

	/**
	 * puts cards on panes
	 * @param pane pane to put cards on
	 * @param cardstack cards to put on
	 */
	private void refreshPane(Pane pane, Cardstack cardstack) {
		GameController tmp = patienceController.getZankController();
		for (int i = 0; i < cardstack.size(); i++){
			Card card = cardstack.get(i);
			Image cardImage = card.getFaceImage();
			ImageView cardImageView = new ImageView(cardImage);
			pane.getChildren().add(cardImageView);
			if (cardstack.getType().equals(Type.PLAYINGSTACK)) {
				cardImageView.setLayoutX(i * 30);
			}
			// setzt DragController fÃ¼r eine Karte

			cardImageView.setOnDragDetected(new DragStartController(tmp, cardImageView, cardstack, card));
			cardImageView.setOnDragOver(new DragOverController(tmp, cardstack));
			cardImageView.setOnDragDropped(new DragDropCrontroller(tmp));
			cardImageView.setOnDragDone(new DragDoneController(tmp));
		}
	}

	/* (non-Javadoc)
	 * @see aui.ZankAUI#refreshMove(model.Move)
	 */
	@Override
	public void refreshMove(Move move) {
		// TODO Auto-generated method stub
		
	}
	
	@FXML
	public void initialize() {
		playingPanes = new ArrayList<>();
		eliminationPanes = new ArrayList<>();
		handPanes = new ArrayList<>();
		reservePanes = new ArrayList<>();
		wastePanes = new ArrayList<>();
		
		playingPanes.add(anlegestapel1);
		playingPanes.add(anlegestapel2);
		playingPanes.add(anlegestapel3);
		playingPanes.add(anlegestapel4);
		playingPanes.add(anlegestapel5);
		playingPanes.add(anlegestapel6);
		playingPanes.add(anlegestapel7);
		playingPanes.add(anlegestapel8);

		eliminationPanes.add(mitteKaro1);
		eliminationPanes.add(mitteKaro2);
		eliminationPanes.add(mittePik1);
		eliminationPanes.add(mittePik2);
		eliminationPanes.add(mitteKreuz1);
		eliminationPanes.add(mitteKreuz2);
		eliminationPanes.add(mitteHerz1);
		eliminationPanes.add(mitteHerz2);
		
		handPanes.add(nachziehstapelSpieler);
		handPanes.add(nachziehstapelGegner);
		
		reservePanes.add(ersatzstapelSpieler);
		reservePanes.add(ersatzstapelGegner);
		
		wastePanes.add(ablegestapelSpieler);
		wastePanes.add(ablegestapelGegner);
	}
	
}

package application;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;

import controller.DeckController;
import controller.FreeCellController;
import controller.PatienceController;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.Separator;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.AnchorPane;
import javafx.stage.FileChooser;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.FileChooser.ExtensionFilter;
import model.AcesUp;
import model.FreeCell;
import model.Game;
import model.Patience;
import model.Player;
import model.Zank;

public class SpielLadenController {

	@FXML
	private AnchorPane spielLadenPane;

	@FXML
	private Button gleicheKartenSpiel;

	@FXML
	private Button neueSpielvarianteStarten;

	@FXML
	private Button spielImportieren;

	@FXML
	private Button neuesSpielStarten;

	@FXML
	private Separator separator;

	@FXML
	private Label player1Label;

	@FXML
	private Label player2Label;

	@FXML
	private ChoiceBox<String> player1;

	@FXML
	private ChoiceBox<String> player2;

	@FXML
	private Label beginner;

	@FXML
	private RadioButton startPlayer1;

	@FXML
	private RadioButton startPlayer2;

	@FXML
	private ToggleGroup startplayer;

	private String spielTyp;

	private HauptmenueController hauptmenueCtr;

	private PatienceController pCtrl;

	public HauptmenueController getHauptmenueCtr() {
		return hauptmenueCtr;
	}

	public void setHauptmenueCtr(HauptmenueController hauptmenueCtr) {
		this.hauptmenueCtr = hauptmenueCtr;
	}

	@FXML
	void gleicheKarten(ActionEvent event) {

	}

	@FXML
	void neueSpielvariante(ActionEvent event) throws IOException {
		FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("Hauptmenue.fxml"));
		Parent root1 = (Parent) fxmlLoader.load();
		Stage stage = new Stage();
		stage.setScene(new Scene(root1));
		stage.initModality(Modality.APPLICATION_MODAL);
		stage.initOwner(spielLadenPane.getScene().getWindow());
		stage.show();
		Stage window = (Stage) spielLadenPane.getScene().getWindow();
		window.close();
	}

	@FXML
	void neuesSpiel(ActionEvent event) {

		String type = this.spielTyp + ".fxml";

		switch (spielTyp) {
		case ("FreeCell"):
			pCtrl.getPatience().setGame(new FreeCell(new DeckController().randomDeck()));
			break;
		case ("Idioten"):
			pCtrl.getPatience().setGame(new AcesUp(new DeckController().randomDeck()));
			break;
		case ("Zank"):
			pCtrl.getPatience().setGame(new Zank(new DeckController().randomDeck(), new DeckController().randomDeck(), Player.PLAYER1, Player.PLAYER2));
			break;
		}

		try {
			AnchorPane root = new AnchorPane();
			FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("Hauptfenster.fxml"));
			root = (AnchorPane) fxmlLoader.load();
			root.setId("pane");
			HauptfensterController hauptfensterCtrl = fxmlLoader.getController();
			hauptfensterCtrl.setPatienceCtrl(pCtrl);
			hauptfensterCtrl.initSpielfeld(type);
			Scene scene = new Scene(root);
			Stage window = new Stage();
			window.setScene(scene);
			window.setResizable(false);
			window.show();

		} catch (Exception e) {
			e.printStackTrace();
		}
		Stage stage = (Stage) spielLadenPane.getScene().getWindow();
		stage.close();
		Stage parentwindow = (Stage) stage.getOwner();
		parentwindow.close();

	}	

	@FXML
	public void initialize() {	
		
	}

	public void init() {
		player1.getItems().setAll("Mensch", "KI Leicht", "KI Mittel", "KI Schwer");
		player2.getItems().setAll("Mensch", "KI Leicht", "KI Mittel", "KI Schwer");
		player1.getSelectionModel().select(0);
		player2.getSelectionModel().select(0);
		startPlayer1.setSelected(true);
	}

	public String getSpielTyp() {
		return spielTyp;
	}

	public void setSpielTyp(String spielTyp) {
		this.spielTyp = spielTyp;
		if(this.getSpielTyp() == "Idioten" || this.getSpielTyp() == "FreeCell"){
    		this.getSpielLadenPane().setPrefHeight(200);
    	}
	}

	public Button getGleicheKartenSpiel() {
		return gleicheKartenSpiel;
	}

	public void setGleicheKartenSpiel(Button gleicheKartenSpiel) {
		this.gleicheKartenSpiel = gleicheKartenSpiel;
	}

	public PatienceController getpCtrl() {
		return pCtrl;
	}

	public void setpCtrl(PatienceController pCtrl) {
		this.pCtrl = pCtrl;
	}

	public ChoiceBox<String> getPlayer1() {
		return player1;
	}

	public void setPlayer1(ChoiceBox<String> player1) {
		this.player1 = player1;
	}

	public ChoiceBox<String> getPlayer2() {
		return player2;
	}

	public void setPlayer2(ChoiceBox<String> player2) {
		this.player2 = player2;
	}

	public RadioButton getStartPlayer1() {
		return startPlayer1;
	}

	public void setStartPlayer1(RadioButton startPlayer1) {
		this.startPlayer1 = startPlayer1;
	}

	public RadioButton getStartPlayer2() {
		return startPlayer2;
	}

	public void setStartPlayer2(RadioButton startPlayer2) {
		this.startPlayer2 = startPlayer2;
	}

	public Separator getSeparator() {
		return separator;
	}

	public void setSeparator(Separator separator) {
		this.separator = separator;
	}

	public Label getPlayer1Label() {
		return player1Label;
	}

	public void setPlayer1Label(Label player1Label) {
		this.player1Label = player1Label;
	}

	public Label getPlayer2Label() {
		return player2Label;
	}

	public void setPlayer2Label(Label player2Label) {
		this.player2Label = player2Label;
	}

	public Label getBeginner() {
		return beginner;
	}

	public void setBeginner(Label beginner) {
		this.beginner = beginner;
	}

	public AnchorPane getSpielLadenPane() {
		return spielLadenPane;
	}

	public void setSpielLadenPane(AnchorPane spielLadenPane) {
		this.spielLadenPane = spielLadenPane;
	}
}

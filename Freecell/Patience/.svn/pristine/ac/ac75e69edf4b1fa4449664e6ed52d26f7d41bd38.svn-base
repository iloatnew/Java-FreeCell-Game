package application;

import java.util.ArrayList;

import controller.DragDropCrontroller;
import controller.DragDropEnteredController;
import controller.DragDropExitController;
import controller.DragOverController;
import controller.DragStartController;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;

import javafx.scene.control.Button;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.StrokeType;
import jdk.nashorn.internal.ir.GetSplitState;
import model.FreeCellSpielZuegen;
import model.Move;
import model.Karte;
import model.Sort;
import model.Stapel;
import model.Stapel.StapelType;
import model.Wert;

public class FreeCellController extends GameController {
	@FXML
	AnchorPane HauptPane;

	@FXML
	Button undo;

	@FXML
	Pane freecell1;
	@FXML
	Pane freecell2;
	@FXML
	Pane freecell3;
	@FXML
	Pane freecell4;

	@FXML
	Pane homecell1;
	@FXML
	Pane homecell2;
	@FXML
	Pane homecell3;
	@FXML
	Pane homecell4;

	@FXML
	Pane spalte1;
	@FXML
	Pane spalte2;
	@FXML
	Pane spalte3;
	@FXML
	Pane spalte4;
	@FXML
	Pane spalte5;
	@FXML
	Pane spalte6;
	@FXML
	Pane spalte7;
	@FXML
	Pane spalte8;

	public FreeCellSpielZuegen zuegen;
	public ArrayList<Stapel> spielStapeln;
	public ArrayList<Stapel> freeCellStapeln;
	public ArrayList<Stapel> homeStapeln;

	public int spielZug;

	public ArrayList<Stapel> getListWithType(StapelType type) {
		switch (type) {
		case FREECELL:
			return this.freeCellStapeln;
		case HOMECELL:
			return this.homeStapeln;
		case SPIELFELD:
			return this.spielStapeln;
		default:
			return null;
		}
	}

	public void initialize() {
		setStapelToDrag(new Stapel(StapelType.DEFAULT, 0));
		setZiehHerkunft(new Stapel(StapelType.DEFAULT, 0));
		setZielStapel(new Stapel(StapelType.DEFAULT, 0));
		zuegen = new FreeCellSpielZuegen(this);
		spielStapeln = new ArrayList<Stapel>();
		freeCellStapeln = new ArrayList<Stapel>();
		homeStapeln = new ArrayList<Stapel>();
		spielZug = 0;

		karteTeilung();
		initializeSpalten();
		HauptPane.setOnDragOver(new DragOverController(this, new Stapel(StapelType.DEFAULT, 0)));
		HauptPane.setOnDragDropped(new DragDropCrontroller(this));

	}

	/**
	 * Teilt alle Karten in Stapeln. Typ: Random Freecells, Homecells : leerer
	 * Stapel
	 */
	private void karteTeilung() {
		Stapel hauptStapel = new Stapel(StapelType.DEFAULT, 0);

		for (Wert wert : Wert.values())
			for (Sort sort : Sort.values())
				hauptStapel.add(new Karte(wert, sort));

		for (int i = 0; i < 8; i++)
			spielStapeln.add(new Stapel(StapelType.SPIELFELD, i));
		for (int i = 0; i < 4; i++)
			freeCellStapeln.add(new Stapel(StapelType.FREECELL, i));
		for (int i = 0; i < 4; i++)
			homeStapeln.add(new Stapel(StapelType.HOMECELL, i));

		for (int i = 0; i < 4; i++)
			for (int j = 0; j < 7; j++)
				spielStapeln.get(i).add(hauptStapel.randomPick());

		for (int i = 4; i < 8; i++)
			for (int j = 0; j < 6; j++)
				spielStapeln.get(i).add(hauptStapel.randomPick());

		zuegen.saveZug();
	}

	/**
	 * setzt ein Stapel in einer Spalte
	 * 
	 * @param Stapeln
	 */
	private void initializeSpalten() {
		setStapel(spalte1, spielStapeln.get(0));
		setStapel(spalte2, spielStapeln.get(1));
		setStapel(spalte3, spielStapeln.get(2));
		setStapel(spalte4, spielStapeln.get(3));
		setStapel(spalte5, spielStapeln.get(4));
		setStapel(spalte6, spielStapeln.get(5));
		setStapel(spalte7, spielStapeln.get(6));
		setStapel(spalte8, spielStapeln.get(7));
		setStapel(freecell1, freeCellStapeln.get(0));
		setStapel(freecell2, freeCellStapeln.get(1));
		setStapel(freecell3, freeCellStapeln.get(2));
		setStapel(freecell4, freeCellStapeln.get(3));
		setStapel(homecell1, homeStapeln.get(0));
		setStapel(homecell2, homeStapeln.get(1));
		setStapel(homecell3, homeStapeln.get(2));
		setStapel(homecell4, homeStapeln.get(3));
	}

	/**
	 * alle Karte soll untereinander gesetzt werden DragController für jede
	 * Karte setzen
	 * 
	 * @param spalte
	 * @param stapel
	 */
	@Override
	public void setStapel(Pane spalte, Stapel stapel) {
		if (stapel.getStapelType().equals(StapelType.FREECELL) || stapel.getStapelType().equals(StapelType.HOMECELL)) {
			Rectangle rect = new Rectangle();
			rect.setHeight(153.0);
			rect.setWidth(105);
			rect.setStyle("-fx-fill: #ffffff44;");
			rect.setStroke(Color.BLACK);
			rect.setStrokeType(StrokeType.INSIDE);
			spalte.getChildren().add(rect);
		}
		
		for (int i = 0; i < stapel.size(); i++) {
			Karte karte = stapel.get(i);
			Image karteImg = karte.getFaceImage();
			ImageView karteImgView = new ImageView(karteImg);
			spalte.getChildren().add(karteImgView);
			// bestimmt die Position für ein Bild
			if (stapel.getStapelType().equals(StapelType.SPIELFELD)) {
				karteImgView.setLayoutY(i * 30);
			}
			// setzt DragController für eine Karte
			karteImgView.setOnDragDetected(new DragStartController(this, karteImgView, stapel, karte));

		}
		
		spalte.setPrefHeight((stapel.size()-1)*30+153);

		spalte.setOnDragEntered(new DragDropEnteredController(this, stapel, spalte));
		spalte.setOnDragExited(new DragDropExitController(this, spalte));
		spalte.setOnDragOver(new DragOverController(this, stapel));
		spalte.setOnDragDropped(new DragDropCrontroller(this));

	}

	/**
	 * kann von Drag/ Drop-Controller geruft werden
	 */
	public void refreshKarte() {
		spalte1.getChildren().clear();
		spalte2.getChildren().clear();
		spalte3.getChildren().clear();
		spalte4.getChildren().clear();
		spalte5.getChildren().clear();
		spalte6.getChildren().clear();
		spalte7.getChildren().clear();
		spalte8.getChildren().clear();
		freecell1.getChildren().clear();
		freecell2.getChildren().clear();
		freecell3.getChildren().clear();
		freecell4.getChildren().clear();
		homecell1.getChildren().clear();
		homecell2.getChildren().clear();
		homecell3.getChildren().clear();
		homecell4.getChildren().clear();
		initializeSpalten();
	}

	/**
	 * die Methode soll jeder Controller haben, damit DragStartController sie
	 * rufen kann
	 * 
	 * @return
	 */
	@Override
	public boolean isDraggable(Stapel stapel, Karte karte) {
		if (stapel.getStapelType().equals(StapelType.SPIELFELD)) {
			// TODO: prüft, wieviele FreeCells frei sind
			int freecells = 0;
			for (Stapel freeCell : freeCellStapeln) {
				if (freeCell.size() == 0)
					freecells++;
			}
			// die Länge der Strasse
			int length = stapel.strasseLaenge(karte);
			if (length <= freecells + 1 && length > 0)
				return true;
			else
				return false;
		} else if (stapel.getStapelType().equals(StapelType.FREECELL)) {
			System.out.println("drag free cell");
			return true;
		}
		return false;
	}

	/**
	 * die Methode soll jeder Controller haben, damit DragDropController sie
	 * rufen kann
	 * 
	 * @return
	 */
	@Override
	public boolean isDroppable(Stapel zielStapel) {
		Karte root = getStapelToDrag().firstElement();
		if (zielStapel.getStapelType().equals(StapelType.SPIELFELD)) {
			if (zielStapel.size() == 0) {
				return true;
			} else {
				return zielStapel.peek().inStrasseAbsteigend(root) ? true : false;
			}
		} else if (zielStapel.getStapelType().equals(StapelType.FREECELL)) {
			if (getStapelToDrag().size() != 1) {
				return false;
			}
			return zielStapel.size() == 0 ? true : false;
		} else if (zielStapel.getStapelType().equals(StapelType.HOMECELL)) {
			if (getStapelToDrag().size() != 1) {
				return false;
			} else {
				if (zielStapel.size() == 0) {
					if (root.getWert().equals(Wert.ASS)) {
						return true;
					}
				} else {
					if (zielStapel.peek().inGleichSortAufsteigend(root)) {
						return true;
					}
				}
				return false;
			}
		} else {
			return false;
		}
	}

	/**
	 * dafür man vorherigen Zug zurückgehen kann.
	 * 
	 * @param event
	 */
	@FXML
	public void undo(ActionEvent event) {
		if (spielZug > 1) {
			spielZug--;
			Move lastzug = zuegen.getLastZug();
			// bestimmt zielStapel
			int zielIndex = lastzug.getTo().getIndex();
			StapelType zielType = lastzug.getTo().getStapelType();
			this.setStapelToDrag(this.getListWithType(zielType).get(zielIndex).cloneAllBelow(lastzug.getNumberOfCards()));
			// bestimmt stapelToDrag
			this.getListWithType(zielType).get(zielIndex).removeAll(this.getStapelToDrag());
			// bestimmt zielHerkunft
			int startIndex = lastzug.getFrom().getIndex();
			StapelType startType = lastzug.getFrom().getStapelType();
			this.getListWithType(startType).get(startIndex).addAll(this.getStapelToDrag());

			refreshKarte();
		}
	}

	@Override
	public void initGame() {
		// TODO Auto-generated method stub

	}

	@Override
	public boolean isFinished() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void autoPlay() {
		// TODO Auto-generated method stub

	}

	@Override
	public void revertMove() {
		// TODO Auto-generated method stub

	}

	@Override
	public void addStatistics() {
		// TODO Auto-generated method stub

	}

	@Override
	public void restartGame() {
		// TODO Auto-generated method stub

	}

	@Override
	public void cancelGame() {
		// TODO Auto-generated method stub

	}
}
